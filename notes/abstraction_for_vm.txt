# Fictive VM

The + operator is implemented as:

	inline int32 op_add(int32 x, int32 y) {
		addi32(result, x, y);
	}

Calling `1 + 2` (translates into `op_add(1, 2)` ensures that args are allocated
registers, and result, too.

Loading and storing data might go somethine like:

	// *x calls this:
	inline int32 op_dereference(int32* x) {
		loadi32(result, x);
	}

	// *x = y calls this:
	inline int32 op_assign(int32* x, int y) {
		storei32(x, y);
	}

Assignment operator must be somehow special. (TODO how to make operator
overloading of the assignment operator for bigger types?)

(Could `dereference` and `assign` be just `get` and `set`?)

The compilation process goes something like:

1. Boil things into simple code 

	f(int* x, int& y) {
		int three = 1 + 2;
		int z = x + *y + three;
		*y = z + 1;
	}

	// Replace operators with function calls

	f(int x, int* y) {
		int three;
		int z;
		three = op_add(1, 2);
		z = op_add(op_add(x, dereference(y)), three);
		op_assign(y, op_add(z, 1));
	}

	// Flatten nested function calls

	f(int x, int* y) {
		int three;
		int z;
		three = op_add(1, 2);
		int tmp1;
		int tmp2;
		tmp1 = op_dereference(y);
		tmp2 = op_add(x, tmp1);
		z = op_add(tmp2, three);
		int tmp3;
		tmp3 = op_add(z, 1);
		op_assign(y, tmp3);
	}

	// Replace literal integers with variables

	f(int x, int* y) {
		int three;
		int z;
		int lit1;
		lit1 = 1;
		int lit2;
		lit2 = 2;
		three = op_add(lit1, lit2);
		int tmp1;
		int tmp2;
		tmp1 = op_dereference(y);
		tmp2 = op_add(x, tmp1);
		z = op_add(tmp2, three);
		int tmp3;
		int lit3;
		lit3 = 1;
		tmp3 = op_add(z, lit3);
		op_assign(y, tmp3);
	}

	// Perform inlining
	// (If at this point inline functions would produce more complex code than
	// virtual machine instructions, we'd have to iterate more on the resulting
	// code)

	f(int x, int* y) {
		int three;
		int z;
		int lit1;
		lit1 = 1;
		int lit2;
		lit2 = 2;
		addi32(three, lit1, lit2);
		int tmp1;
		int tmp2;
		loadi32(tmp1, y);
		addi32(tmp2, x, tmp1);
		addi32(z, tmp2, three);
		int tmp3;
		int lit3;
		lit3 = 1;
		addi32(tmp3, z, lit3);
		storei32(y, tmp3);
	}

Loading of the literal values into registers must be implemented as virtual
machine instructions as well, but they can't be defined in the language itself,
unlike the other low-level operations.  So `lit1 = 1;` would likely end up being
something like `loadi32_immediate(lit1, 1);` :

	f(int x, int* y) {
		int three;
		int z;
		int lit1;
		loadi32_immediate(lit1, 1);
		int lit2;
		loadi32_immediate(lit2, 2);
		addi32(three, lit1, lit2);
		int tmp1;
		int tmp2;
		loadi32(tmp1, y);
		addi32(tmp2, x, tmp1);
		addi32(z, tmp2, three);
		int tmp3;
		int lit3;
		loadi32_immediate(lit3, 1);
		addi32(tmp3, z, lit3);
		storei32(y, tmp3);
	}

Now all VM instructions operate on word-size pieces and can be easily
interpreted or compiled into machine code.

Is this the best order?  It might not be.

TODO How does this work with larger types? 

TODO How about function calls (that aren't inlined)

TODO How about labels and calling them (Just use `goto` syntax?)

TODO How about references to external names, say using the address of a global
variable 

How about a different syntax to possibly make it more readable?  `=` could also
be used, but it's better to make it explicit that these are machine instructions
instead of higher-level code.

	f(int x, int* y) {
		int three;
		int z;
		int lit1;
		lit1 <- 1;
		int lit2;
		lit2 <- 2;
		three <- addi32(lit1, lit2);
		int tmp1;
		int tmp2;
		tmp1 <- *y;
		tmp2 <- addi32(x, tmp1);
		z <- addi32(tmp2, three);
		int tmp3;
		int lit3;
		lit3 <- 1;
		tmp3 <- addi32(tmp3, z, lit3);
		*y <- tmp3;
	}

Variable declarations might also be collected to the start of the function, but
now it is always clear where the scope of a variable starts.



## How about function calls, then?

### Return values

It would be "natural" for functions to return a value in the stack.

...
arg2
arg1

In a sense, function would consume arguments 1..n from stack and replace them
with something else.

Then things like f(g(1, 2), 3) would translate into

	evaluate g(1, 2) and push into stack
	evaluate 3 and push into stack
	call f

How would that work?

Before calling f, we'd have:

	fp	...
		arg1	# contents of g(1, 2)
	sp	arg2	# 3

`call f` would:

	push return address
	push current frame pointer 
	set fp = sp
	pc = f

Now stack:

		arg1
		arg2
		return address
fp	sp	old fp

`f` does what it does, pushing stuff and popping as it wishes, but always using
fp to refer to its local variables.

Returning from the function:

	fp[24] = return value // overwrite 'arg1'
	ret 8

`ret` then pops fp from stack, pc from stack, and frees 8 bytes from the stack
(enough to leave the return value, which overwrote arg1)

This assumes that function always knows how many arguments it receives. 

How would we assign to the return value in the middle of the function execution?

For this

	int x = f(123, 234);

the call sequence would look like:

	push 0 // default value for the result
	push 123 // arg1
	push 234
	call f

f would simply know that its return value is at fp[32] (fp[0] = old fp, fp[1] =
old pc, fp[2] = arg2, fp[3] = arg3

Let's see how this goes recursively:

	int add(int a, int b) {
		return a + b;
	}

	int mul(int a, int b) {
		return a * b;
	}

	print(int i) { ... }

	main() {
		int x = mul(add(1, 2), add(3, 4));
		print(x);
	}

=>
	// Split variable declarations with values into
	// declaration and initialization
	main() {
		int x;
		x = mul(add(1, 2), add(3, 4));
		print(x);
	}

=>
	// Make function return values into a temporary values
	main() {
		int x;
		tmp int ret1;
		ret1 = mul(add(1, 2), add(3, 4));
		x = ret1;
	}

	// Make function arguments into temporary values
	main() {
		int x;
		tmp int ret1;
		tmp int arg1;
		arg1 = add(1, 2);
		tmp int arg2;
		arg2 = add(3, 4);
		ret1 = mul(arg1, arg2);
		x = ret1;
	}

	// Do this until all function calls take temporary values and their return
	// values are assigned into temporary values
	main() {
		int x;
		tmp int ret1;
		tmp int arg1;
		tmp int add1_arg1;
		add1_arg1 = 1;
		tmp int add1_arg2;
		add1_arg2 = 2;
		arg1 = add(add1_arg1, add1_arg2);
		tmp int arg2;
		tmp int add2_arg1;
		add2_arg2 = 3;
		tmp int add2_arg2;
		add2_arg2 = 4;
		arg2 = add(add2_arg1, add2_arg2);
		ret1 = mul(arg1, arg2);
		x = ret1;
	}
	// (We could have left things like `tmp int add1_arg1 = 1` in there, which
	// could be converted directly into 'push 1'; but didn't for simplicity)

=>

	// Convert variable declarations into pushes:
	main() {
		push 0; // int x
		push 0; // tmp int ret1;
		push 0; // tmp int arg1;
		push 0; // tmp int add1_arg1;
		add1_arg1 = 1;
		push 0; // tmp int add1_arg2;
		add1_arg2 = 2;
		arg1 = add(add1_arg1, add1_arg2);
		push 0; // tmp int arg2;
		push 0; // tmp int add2_arg1;
		add2_arg2 = 3;
		push 0; // tmp int add2_arg2;
		add2_arg2 = 4;
		arg2 = add(add2_arg1, add2_arg2);
		ret1 = mul(arg1, arg2);
		x = ret1;
	}

=> 

	// Convert assignments into local variables into movs:
	// and somehow arrange that the function return value is popped from the
	// stack when it is used, unless it's used for a temporary value in order to
	// call a new function
	main() {
		push 0; // int x
		push 0; // tmp int ret1;
		push 0; // tmp int arg1;
		push 0; // tmp int add1_arg1;
		mov [sp], 1 // add1_arg1 = 1;
		push 0; // tmp int add1_arg2;
		mov [sp], 2 // add1_arg2 = 2;
		arg1 = add(add1_arg1, add1_arg2);
		push 0; // tmp int arg2;
		push 0; // tmp int add2_arg1;
		mov [sp], 3 // add2_arg2 = 3;
		push 0; // tmp int add2_arg2;
		mov [sp], 4 // add2_arg2 = 4;
		arg2 = add(add2_arg1, add2_arg2);
		ret1 = mul(arg1, arg2);
		mov [fp - 8], [sp++] // x = ret1;
	}

	// (This is just silly, besides we can't even assign to [sp] currently)

=>

	// Convert function calls into `call`s
	main() {
		push 0; // int x
		push 0; // tmp int ret1;
		push 0; // tmp int arg1;
		push 0; // tmp int add1_arg1;
		mov [sp], 1 // add1_arg1 = 1;
		push 0; // tmp int add1_arg2;
		mov [sp], 2 // add1_arg2 = 2;
		call add // arg1 = add(add1_arg1, add1_arg2);
		push 0; // tmp int arg2;
		push 0; // tmp int add2_arg1;
		mov [sp], 3 // add2_arg2 = 3;
		push 0; // tmp int add2_arg2;
		mov [sp], 4 // add2_arg2 = 4;
		call add // arg2 = add(add2_arg1, add2_arg2);
		call mul // ret1 = mul(arg1, arg2);
		mov [fp - 8], [sp++] // x = ret1;
	}

Could we just use plain syntax?

	use asm.{sp,call};

	main() {
		*--sp = 0; // x
		--sp; // allocate space for ret1
		--sp; // allocate space for arg1
		--sp; // allocate space for add1_arg1;
		*sp = 1; // add1_arg1 = 1;
		--sp; // allocate space for add1_arg2;
		*sp = 2; // add1_arg2 = 2;
		call add;
		// etc
	}

`call` must be special, since it pushes things to stack before setting pc to a
new value. The syntax is similar to `goto add`. At this point, values like the
function name and local labels are considered global constants.

Optimizing things like `goto next;` into `pc += 3;` or stuff like that are
exactly that, optimizations.

